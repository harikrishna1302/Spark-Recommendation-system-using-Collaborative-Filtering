{"metadata":{"name":"ProjectPandyaChagalmarri","user_save_timestamp":"1969-12-31T16:00:00.000Z","auto_save_timestamp":"1969-12-31T16:00:00.000Z","language_info":{"name":"scala","file_extension":"scala","codemirror_mode":"text/x-scala"},"trusted":true,"customLocalRepo":null,"customRepos":null,"customDeps":null,"customImports":null,"customArgs":null,"customSparkConf":null},"cells":[{"metadata":{"id":"3F40E518B6984AD8AF90898A942717BC"},"cell_type":"markdown","source":"Name: Akshay Pandya, Hari Krishna Chagalamarri"},{"metadata":{"id":"D0F0ED4F47E541638B11A88EC32AA83E"},"cell_type":"markdown","source":"The Spark-scala Notebook  for the recommendation system using ALS algorithm to generate matrix factorization model"},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"D32DE96A93D64D5F9DB4C072F0636F5E"},"cell_type":"code","source":"sc","outputs":[{"name":"stdout","output_type":"stream","text":"res78: org.apache.spark.SparkContext = org.apache.spark.SparkContext@24429a1c\n"},{"metadata":{},"data":{"text/html":"org.apache.spark.SparkContext@24429a1c"},"output_type":"execute_result","execution_count":69,"time":"Took: 444 milliseconds, at 2016-12-14 19:35"}]},{"metadata":{"id":"6CB9DB07B85941D4806B1DD8D36A8837"},"cell_type":"markdown","source":"initially, import the spark sql library before getting in to the project."},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"6DA312CB35714D5E99F4264A37C43A18"},"cell_type":"code","source":"import org.apache.spark.sql._\n","outputs":[{"name":"stdout","output_type":"stream","text":"import org.apache.spark.sql._\n"},{"metadata":{},"data":{"text/html":""},"output_type":"execute_result","execution_count":70,"time":"Took: 431 milliseconds, at 2016-12-14 19:36"}]},{"metadata":{"id":"DC1AA5AED82F405F806DA3AE85291022"},"cell_type":"markdown","source":"Create a new SQLContext with sc."},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"3BE5EF250E4249698BD5CC58669D949D"},"cell_type":"code","source":"val sqlContext = new SQLContext(sc)\n","outputs":[{"name":"stdout","output_type":"stream","text":"<console>:93: warning: constructor SQLContext in class SQLContext is deprecated: Use SparkSession.builder instead\n       val sqlContext = new SQLContext(sc)\n                        ^\nsqlContext: org.apache.spark.sql.SQLContext = org.apache.spark.sql.SQLContext@1cd42916\n"},{"metadata":{},"data":{"text/html":""},"output_type":"execute_result","execution_count":71,"time":"Took: 438 milliseconds, at 2016-12-14 19:36"}]},{"metadata":{"id":"928AE9AEBE2741CB82D930F7E50808D4"},"cell_type":"markdown","source":"Next, import required libraries from sqlContext and spark.mlib.recommendation "},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"F072A52143D540CEB71E540DC3466FBD"},"cell_type":"code","source":"import sqlContext.implicits._\n","outputs":[{"name":"stdout","output_type":"stream","text":"import sqlContext.implicits._\n"},{"metadata":{},"data":{"text/html":""},"output_type":"execute_result","execution_count":72,"time":"Took: 850 milliseconds, at 2016-12-14 19:36"}]},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"21F10449F043487482DE2F98D4858F46"},"cell_type":"code","source":"import org.apache.spark.mllib.recommendation.ALS\n","outputs":[{"name":"stdout","output_type":"stream","text":"import org.apache.spark.mllib.recommendation.ALS\n"},{"metadata":{},"data":{"text/html":""},"output_type":"execute_result","execution_count":73,"time":"Took: 448 milliseconds, at 2016-12-14 19:36"}]},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"EB048D424D1549BE9171A24D1A42E11A"},"cell_type":"code","source":"import org.apache.spark.mllib.recommendation.MatrixFactorizationModel\n","outputs":[{"name":"stdout","output_type":"stream","text":"import org.apache.spark.mllib.recommendation.MatrixFactorizationModel\n"},{"metadata":{},"data":{"text/html":""},"output_type":"execute_result","execution_count":74,"time":"Took: 453 milliseconds, at 2016-12-14 19:36"}]},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"13F2CDB2A17E4D698286B3DE8F3A6676"},"cell_type":"code","source":"import org.apache.spark.mllib.recommendation.Rating\n","outputs":[{"name":"stdout","output_type":"stream","text":"import org.apache.spark.mllib.recommendation.Rating\n"},{"metadata":{},"data":{"text/html":""},"output_type":"execute_result","execution_count":75,"time":"Took: 452 milliseconds, at 2016-12-14 19:36"}]},{"metadata":{"id":"BD751A414F4B4B4A9C70EFE7F0178299"},"cell_type":"markdown","source":"Create an RDD for the input file \"ratings.dat\" and map it by splitting the data."},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"02B54B2B86E7429B89FD6C6C432165B8"},"cell_type":"code","source":"val rate = sc.textFile(\"ratings.dat\")\n","outputs":[{"name":"stdout","output_type":"stream","text":"rate: org.apache.spark.rdd.RDD[String] = ratings.dat MapPartitionsRDD[478] at textFile at <console>:101\n"},{"metadata":{},"data":{"text/html":""},"output_type":"execute_result","execution_count":76,"time":"Took: 490 milliseconds, at 2016-12-14 19:36"}]},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"84D016CCBDDA44D3827593135D4828E0"},"cell_type":"code","source":"val rating = rate.map(_.split(\"::\") match { case Array(user, item, rate, timestamp) => Rating(user.toInt, item.toInt, rate.toDouble)})\n","outputs":[{"name":"stdout","output_type":"stream","text":"rating: org.apache.spark.rdd.RDD[org.apache.spark.mllib.recommendation.Rating] = MapPartitionsRDD[479] at map at <console>:103\n"},{"metadata":{},"data":{"text/html":""},"output_type":"execute_result","execution_count":77,"time":"Took: 522 milliseconds, at 2016-12-14 19:36"}]},{"metadata":{"id":"00B7C6DE80F843B9A73BEE2DEBC61101"},"cell_type":"markdown","source":"Count the number of ratings in the input file using count method."},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"6EE6AA481CD74C16964C4C92EDD95217"},"cell_type":"code","source":"val numRatings = rating.count()\n","outputs":[{"name":"stdout","output_type":"stream","text":"numRatings: Long = 1000209\n"},{"metadata":{},"data":{"text/html":""},"output_type":"execute_result","execution_count":78,"time":"Took: 1 second 29 milliseconds, at 2016-12-14 19:36"}]},{"metadata":{"id":"FA9FC66322D54883AFA4CB090D0CAE6A"},"cell_type":"markdown","source":"Then, count the distinct number of ratedmovies using distinct and count methods. "},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"63A988C9B41E467299576421E2AE6A1F"},"cell_type":"code","source":"val numRatedMovies = rating.map(_.product).distinct().count()\n","outputs":[{"name":"stdout","output_type":"stream","text":"numRatedMovies: Long = 3706\n"},{"metadata":{},"data":{"text/html":""},"output_type":"execute_result","execution_count":79,"time":"Took: 1 second 100 milliseconds, at 2016-12-14 19:36"}]},{"metadata":{"id":"F254F38B258E49CD8A8D8E9394277C9E"},"cell_type":"markdown","source":"find the distinct number of users who rated at least one movie."},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"03569F8A8E5442F3A7848FC7AA5473FA"},"cell_type":"code","source":"val numRatingUsers = rating.map(_.user).distinct().count()\n","outputs":[{"name":"stdout","output_type":"stream","text":"numRatingUsers: Long = 6040\n"},{"metadata":{},"data":{"text/html":""},"output_type":"execute_result","execution_count":80,"time":"Took: 1 second 81 milliseconds, at 2016-12-14 19:36"}]},{"metadata":{"id":"94191E5ECD4A42A98FCAE799E86D5FB0"},"cell_type":"markdown","source":"Now, Convert the RDD to data frame."},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"AAD4714FB76E46648239CDB128E14D96"},"cell_type":"code","source":"val ratingsDF = rating.toDF(\"userId\",\"movieId\",\"rating\")\n","outputs":[{"name":"stdout","output_type":"stream","text":"ratingsDF: org.apache.spark.sql.DataFrame = [userId: int, movieId: int ... 1 more field]\n"},{"metadata":{},"data":{"text/html":""},"output_type":"execute_result","execution_count":81,"time":"Took: 564 milliseconds, at 2016-12-14 19:36"}]},{"metadata":{"id":"987FF6EAC33D4F3383E40CBD21CE3E60"},"cell_type":"markdown","source":"Next, create a table with name \"ratings\" using ratingsDF.registerTempTable() ."},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"28521D6636494AA39A179B8841167FDF"},"cell_type":"code","source":"ratingsDF.registerTempTable(\"ratings\")\n","outputs":[{"name":"stdout","output_type":"stream","text":"<console>:109: warning: method registerTempTable in class Dataset is deprecated: Use createOrReplaceTempView(viewName) instead.\n       ratingsDF.registerTempTable(\"ratings\")\n                 ^\n"},{"metadata":{},"data":{"text/html":""},"output_type":"execute_result","execution_count":82,"time":"Took: 641 milliseconds, at 2016-12-14 19:36"}]},{"metadata":{"id":"297E8DD450C0481082E7F2697744BFEA"},"cell_type":"markdown","source":"Create a movieRdd for the movies.dat file."},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"999912F05A9A482784B626199105FA4D"},"cell_type":"code","source":"val moviesRDD = sc.textFile(\"movies.dat\")\n","outputs":[{"name":"stdout","output_type":"stream","text":"moviesRDD: org.apache.spark.rdd.RDD[String] = movies.dat MapPartitionsRDD[491] at textFile at <console>:101\n"},{"metadata":{},"data":{"text/html":""},"output_type":"execute_result","execution_count":83,"time":"Took: 495 milliseconds, at 2016-12-14 19:36"}]},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"A362F2F43EA94C43A00A9B393266D0C1"},"cell_type":"code","source":"val movies = moviesRDD.map(r=>r.split(\"::\")).map(r=>(r(0).toInt, r(1).toString, r(2).toString ))\n","outputs":[{"name":"stdout","output_type":"stream","text":"movies: org.apache.spark.rdd.RDD[(Int, String, String)] = MapPartitionsRDD[493] at map at <console>:103\n"},{"metadata":{},"data":{"text/html":""},"output_type":"execute_result","execution_count":84,"time":"Took: 886 milliseconds, at 2016-12-14 19:36"}]},{"metadata":{"id":"D2B45B95A79646079B8149EB8F3AC52F"},"cell_type":"markdown","source":"Convert the movieRdd to dataframe using .toDF()."},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"16305A158FEC4C0984483C093104A4D8"},"cell_type":"code","source":"val moviesDF = movies.toDF(\"movieId\", \"title\", \"genre\")\n","outputs":[{"name":"stdout","output_type":"stream","text":"moviesDF: org.apache.spark.sql.DataFrame = [movieId: int, title: string ... 1 more field]\n"},{"metadata":{},"data":{"text/html":""},"output_type":"execute_result","execution_count":85,"time":"Took: 584 milliseconds, at 2016-12-14 19:36"}]},{"metadata":{"id":"C92A60203B38483F89280B9C1C0EDA2C"},"cell_type":"markdown","source":"Now, create table using moviesDF."},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"CF510C48DB6A45E484E37DDE9E780D39"},"cell_type":"code","source":"moviesDF.registerTempTable(\"movies\")\n","outputs":[{"name":"stdout","output_type":"stream","text":"<console>:109: warning: method registerTempTable in class Dataset is deprecated: Use createOrReplaceTempView(viewName) instead.\n       moviesDF.registerTempTable(\"movies\")\n                ^\n"},{"metadata":{},"data":{"text/html":""},"output_type":"execute_result","execution_count":86,"time":"Took: 655 milliseconds, at 2016-12-14 19:36"}]},{"metadata":{"id":"BF1832A5DC0345A59EEF96C8F9B8433D"},"cell_type":"markdown","source":"Similarly, create RDD and table for users.dat file."},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"22B182BF00C04BAF83FCA20BCB22945B"},"cell_type":"code","source":"val usersRDD = sc.textFile(\"users.dat\")\n","outputs":[{"name":"stdout","output_type":"stream","text":"usersRDD: org.apache.spark.rdd.RDD[String] = users.dat MapPartitionsRDD[497] at textFile at <console>:101\n"},{"metadata":{},"data":{"text/html":""},"output_type":"execute_result","execution_count":87,"time":"Took: 464 milliseconds, at 2016-12-14 19:36"}]},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"FA671F260D7D42B8926B0EEDCC6A33CA"},"cell_type":"code","source":"val users = usersRDD.map(r=>r.split(\"::\")).map(r=>(r(0).toInt, r(1).toString, r(3).toInt))\n","outputs":[{"name":"stdout","output_type":"stream","text":"users: org.apache.spark.rdd.RDD[(Int, String, Int)] = MapPartitionsRDD[499] at map at <console>:103\n"},{"metadata":{},"data":{"text/html":""},"output_type":"execute_result","execution_count":88,"time":"Took: 499 milliseconds, at 2016-12-14 19:36"}]},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"5E7101978F5643368D1C02E24C6BA673"},"cell_type":"code","source":"val usersDF = users.toDF(\"userId\",\"gender\",\"zip\")\n","outputs":[{"name":"stdout","output_type":"stream","text":"usersDF: org.apache.spark.sql.DataFrame = [userId: int, gender: string ... 1 more field]\n"},{"metadata":{},"data":{"text/html":""},"output_type":"execute_result","execution_count":89,"time":"Took: 548 milliseconds, at 2016-12-14 19:36"}]},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"1A4FA35BCAD6458CB237BF76DD6C259B"},"cell_type":"code","source":"usersDF.registerTempTable(\"users\")\n","outputs":[{"name":"stdout","output_type":"stream","text":"<console>:109: warning: method registerTempTable in class Dataset is deprecated: Use createOrReplaceTempView(viewName) instead.\n       usersDF.registerTempTable(\"users\")\n               ^\n"},{"metadata":{},"data":{"text/html":""},"output_type":"execute_result","execution_count":90,"time":"Took: 640 milliseconds, at 2016-12-14 19:36"}]},{"metadata":{"id":"25883F2C2917432B93240C0A6A141DC5"},"cell_type":"markdown","source":"Now, using sqlContext create an SQL query to get the movies with the average highest ratings in descending order."},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"9E27CFD5DB5D476A8F125239EE1514F7"},"cell_type":"code","source":"val top_rated = sqlContext.sql(\"SELECT movies.title, mr.maxr, mr.minr, mr.cntu FROM(SELECT ratings.movieId, max(ratings.rating)as maxr, min(ratings.rating) as minr, count(distinct userId) as cntu FROM ratings GROUP BY ratings.movieId) mr join movies on mr.movieId = movies.movieID order by mr.cntu desc\")\n","outputs":[{"name":"stdout","output_type":"stream","text":"top_rated: org.apache.spark.sql.DataFrame = [title: string, maxr: double ... 2 more fields]\n"},{"metadata":{},"data":{"text/html":""},"output_type":"execute_result","execution_count":91,"time":"Took: 490 milliseconds, at 2016-12-14 19:36"}]},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"CE489582B0134E5A8D1BD27DE5D9AF8C"},"cell_type":"code","source":"top_rated.show()","outputs":[{"name":"stdout","output_type":"stream","text":"+--------------------+----+----+----+\n|               title|maxr|minr|cntu|\n+--------------------+----+----+----+\n|American Beauty (...| 5.0| 1.0|3428|\n|Star Wars: Episod...| 5.0| 1.0|2991|\n|Star Wars: Episod...| 5.0| 1.0|2990|\n|Star Wars: Episod...| 5.0| 1.0|2883|\n|Jurassic Park (1993)| 5.0| 1.0|2672|\n|Saving Private Ry...| 5.0| 1.0|2653|\n|Terminator 2: Jud...| 5.0| 1.0|2649|\n|  Matrix, The (1999)| 5.0| 1.0|2590|\n|Back to the Futur...| 5.0| 1.0|2583|\n|Silence of the La...| 5.0| 1.0|2578|\n| Men in Black (1997)| 5.0| 1.0|2538|\n|Raiders of the Lo...| 5.0| 1.0|2514|\n|        Fargo (1996)| 5.0| 1.0|2513|\n|Sixth Sense, The ...| 5.0| 1.0|2459|\n|   Braveheart (1995)| 5.0| 1.0|2443|\n|Shakespeare in Lo...| 5.0| 1.0|2369|\n|Princess Bride, T...| 5.0| 1.0|2318|\n|Schindler's List ...| 5.0| 1.0|2304|\n|L.A. Confidential...| 5.0| 1.0|2288|\n|Groundhog Day (1993)| 5.0| 1.0|2278|\n+--------------------+----+----+----+\nonly showing top 20 rows\n\n"},{"metadata":{},"data":{"text/html":""},"output_type":"execute_result","execution_count":92,"time":"Took: 4 seconds 348 milliseconds, at 2016-12-14 19:37"}]},{"metadata":{"id":"CD7601744CE04B91994645635BD9DFCF"},"cell_type":"markdown","source":"Now, intialize values for rank, number of iterations, and lambda for the ALS algorithm."},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"94D3938B91634BE2862A9588D791640C"},"cell_type":"code","source":"val rank = 70\n","outputs":[{"name":"stdout","output_type":"stream","text":"rank: Int = 70\n"},{"metadata":{},"data":{"text/html":""},"output_type":"execute_result","execution_count":93,"time":"Took: 637 milliseconds, at 2016-12-14 19:38"}]},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"681EE9ECB4A84324BD6DF8BC2DD84414"},"cell_type":"code","source":"val numIterations = 20\n","outputs":[{"name":"stdout","output_type":"stream","text":"numIterations: Int = 20\n"},{"metadata":{},"data":{"text/html":""},"output_type":"execute_result","execution_count":94,"time":"Took: 457 milliseconds, at 2016-12-14 19:38"}]},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"6361DD2E285D449788D49EABF52CAB40"},"cell_type":"code","source":"val lambda = 0.01\n","outputs":[{"name":"stdout","output_type":"stream","text":"lambda: Double = 0.01\n"},{"metadata":{},"data":{"text/html":""},"output_type":"execute_result","execution_count":95,"time":"Took: 476 milliseconds, at 2016-12-14 19:38"}]},{"metadata":{"id":"E66C945DC907464D9655366B29FCA724"},"cell_type":"markdown","source":"Create model using train method on ALS with the arguments rating, rank, numIterations and lambda"},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"DF7480BF6BEB4A63A694E88C5F8ACF78"},"cell_type":"code","source":"val model = ALS.train(rating, rank, numIterations, lambda)\n","outputs":[]},{"metadata":{"id":"19BC06A7987C4643951B88B3B4E6622B"},"cell_type":"markdown","source":"Generating the user product/movieId pairs for the model evaluation purpose."},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"956487F7B41C47BD940E46E9FB9B42E3"},"cell_type":"code","source":"val usersProducts = rating.map { case Rating(user, product, rate) => (user, product)}","outputs":[{"name":"stdout","output_type":"stream","text":"usersProducts: org.apache.spark.rdd.RDD[(Int, Int)] = MapPartitionsRDD[453] at map at <console>:94\n"},{"metadata":{},"data":{"text/html":""},"output_type":"execute_result","execution_count":60,"time":"Took: 551 milliseconds, at 2016-12-14 19:22"}]},{"metadata":{"id":"1EE0BB30E6484047B581D95DE8E23B9E"},"cell_type":"markdown","source":"taking the predictions from the rating table and the Rating table to compare the values that are predicted and which user rated."},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"5C5A3F593B284A9FA5E6A5ED86A36C4B"},"cell_type":"code","source":"val predictions = model.predict(usersProducts).map { case Rating(user, product, rate) => ((user, product), rate) }","outputs":[{"name":"stdout","output_type":"stream","text":"predictions: org.apache.spark.rdd.RDD[((Int, Int), Double)] = MapPartitionsRDD[463] at map at <console>:104\n"},{"metadata":{},"data":{"text/html":""},"output_type":"execute_result","execution_count":61,"time":"Took: 1 second 192 milliseconds, at 2016-12-14 19:22"}]},{"metadata":{"id":"FDA54D4B9F6B47E3AD59C10A3E990839"},"cell_type":"markdown","source":"joining the predictions to calculate the MSE"},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"C980BEDB7B07461C91C2DB89A9CB17FA"},"cell_type":"code","source":"val ratesAndPreds = rating.map { case Rating(user, product, rate) => ((user, product), rate)}.join(predictions)\n","outputs":[{"name":"stdout","output_type":"stream","text":"ratesAndPreds: org.apache.spark.rdd.RDD[((Int, Int), (Double, Double))] = MapPartitionsRDD[467] at join at <console>:106\n"},{"metadata":{},"data":{"text/html":""},"output_type":"execute_result","execution_count":62,"time":"Took: 560 milliseconds, at 2016-12-14 19:22"}]},{"metadata":{"id":"D1981188C256452C890B14A5B0903C33"},"cell_type":"markdown","source":"Find the mean squared error value using above ratesAndPreds and display using println."},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"243399616CBB444F8C072761389DE5B3"},"cell_type":"code","source":"val MSE = ratesAndPreds.map { case ((user, product), (r1, r2)) =>\n  val err = (r1 - r2)\n  err * err\n}.mean()","outputs":[{"name":"stdout","output_type":"stream","text":"MSE: Double = 0.2060332708062546\n"},{"metadata":{},"data":{"text/html":""},"output_type":"execute_result","execution_count":63,"time":"Took: 2 seconds 940 milliseconds, at 2016-12-14 19:22"}]},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"F1BA01C4B9854B9189EA86AB7678133A"},"cell_type":"code","source":"println(\"Mean Squared Error = \" + MSE)\n","outputs":[{"name":"stdout","output_type":"stream","text":"Mean Squared Error = 0.2060332708062546\n"},{"metadata":{},"data":{"text/html":""},"output_type":"execute_result","execution_count":64,"time":"Took: 594 milliseconds, at 2016-12-14 19:22"}]},{"metadata":{"id":"7A8FD607EECC4E6D86D78AFCC282FAD3"},"cell_type":"markdown","source":"Find the user product recommendation pairs (Top ten recommendations for user with the userid)."},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"0F6EC75F9D9B426E81301C8A8CD8FF32"},"cell_type":"code","source":"val reco = model.recommendProducts(25,10)\n","outputs":[{"name":"stdout","output_type":"stream","text":"reco: Array[org.apache.spark.mllib.recommendation.Rating] = Array(Rating(10,1680,5.6709539189446385), Rating(10,3790,5.618824503558825), Rating(10,2125,5.541884124283235), Rating(10,893,5.532672998989465), Rating(10,2580,5.5287284906217575), Rating(10,2762,5.472821128538917), Rating(10,1653,5.419819426757453), Rating(10,1696,5.390768537432746), Rating(10,1028,5.3851958314760955), Rating(10,2232,5.3522733374171745))\n"},{"metadata":{},"data":{"text/html":""},"output_type":"execute_result","execution_count":65,"time":"Took: 502 milliseconds, at 2016-12-14 19:22"}]},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"29F4C390AC8D4D87803CD76710706B3B"},"cell_type":"code","source":"println(reco.mkString(\"\\n\"))\n","outputs":[{"name":"stdout","output_type":"stream","text":"Rating(10,1680,5.6709539189446385)\nRating(10,3790,5.618824503558825)\nRating(10,2125,5.541884124283235)\nRating(10,893,5.532672998989465)\nRating(10,2580,5.5287284906217575)\nRating(10,2762,5.472821128538917)\nRating(10,1653,5.419819426757453)\nRating(10,1696,5.390768537432746)\nRating(10,1028,5.3851958314760955)\nRating(10,2232,5.3522733374171745)\n"},{"metadata":{},"data":{"text/html":""},"output_type":"execute_result","execution_count":66,"time":"Took: 600 milliseconds, at 2016-12-14 19:22"}]},{"metadata":{"id":"8BE1302F77BD42E4BE5159BE2AFAF202"},"cell_type":"markdown","source":"find the titles for the moviesDF using rdd.map(---).collectAsMap() "},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"2B474A1EE8F0401B8CD5F15AE6A4C205"},"cell_type":"code","source":"val titles = moviesDF.rdd.map(array => (array(0),array(1))).collectAsMap()\n","outputs":[{"name":"stdout","output_type":"stream","text":"titles: scala.collection.Map[Any,Any] = Map(3672 -> Benji (1974), 3331 -> My Tutor (1983), 2990 -> Licence to Kill (1989), 3744 -> Shaft (2000), 3026 -> Slaughterhouse (1987), 3340 -> Bride of the Monster (1956), 2685 -> Red Dwarf, The (Le Nain rouge) (1998), 2344 -> Runaway Train (1985), 3753 -> Patriot, The (2000), 2353 -> Enemy of the State (1998), 2012 -> Back to the Future Part III (1990), 137 -> Man of the Year (1995), 3107 -> Backdraft (1991), 2021 -> Dune (1984), 891 -> Halloween: The Curse of Michael Myers (1995), 1205 -> Transformers: The Movie, The (1986), 550 -> Threesome (1994), 864 -> Wife, The (1995), 146 -> Amazing Panda Adventure, The (1995), 2775 -> Head On (1998), 559 -> Paris, France (1993), 218 -> Boys on the Side (1995), 3654 -> Guns of Navarone, The (1961), 568 ->..."},{"metadata":{},"data":{"text/html":""},"output_type":"execute_result","execution_count":67,"time":"Took: 664 milliseconds, at 2016-12-14 19:23"}]},{"metadata":{"id":"52EF72BCE9E34C9D9D9B98B2E993F375"},"cell_type":"markdown","source":"Now, take 10 movies by sorting according to the rating and apply map method to each movie which results UserId, movieId and title."},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"74B678E9AE6A41D69FB56A8F81070D7B"},"cell_type":"code","source":"val res1 = reco.sortBy(-_.rating).take(10).map(rating => (rating.user,rating.product,titles(rating.product))).foreach(println)\n","outputs":[{"name":"stdout","output_type":"stream","text":"(10,1680,Sliding Doors (1998))\n(10,3790,Groove (2000))\n(10,2125,Ever After: A Cinderella Story (1998))\n(10,893,Mother Night (1996))\n(10,2580,Go (1999))\n(10,2762,Sixth Sense, The (1999))\n(10,1653,Gattaca (1997))\n(10,1696,Bent (1997))\n(10,1028,Mary Poppins (1964))\n(10,2232,Cube (1997))\n"},{"metadata":{},"data":{"text/html":""},"output_type":"execute_result","execution_count":68,"time":"Took: 692 milliseconds, at 2016-12-14 19:23"}]}],"nbformat":4}